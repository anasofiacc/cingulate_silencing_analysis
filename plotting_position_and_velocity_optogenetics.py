import matplotlib.pyplot as pltimport seaborn as snsfrom collect_and_organize_position_data_optogenetics import get_position_and_run_info_in_multi_index_df"""--------PLOT POSITION DATA (RUNS) WITHOUT COLOR CODED VELOCITY----------"""def plot_all_runs_overlayed(files_path):    data = get_position_and_run_info_in_multi_index_df(files_path, specs_to_runs=True)    # ----------------- PLOT ALL DATA POINTS  --------------------- #    fig = plt.figure(figsize=(8, 8), dpi=300)    fig.patch.set_facecolor('white')    plt.scatter(data['x'], data['y'], s=0.5, color='darkgrey')    # -------------- CHOICE POINT ----------------- #    # ROI    plt.hlines(70, 183, 193, linewidth=1.5, linestyle=':', color='navy')    plt.hlines(80, 183, 193, linewidth=1.5, linestyle=':', color='navy')    plt.vlines(193, 70, 80, linewidth=1.5, linestyle=':', color='navy')    plt.vlines(183, 70, 80, linewidth=1.5, linestyle=':', color='navy')    # Barriers    plt.hlines(70, 178, 203, linewidth=2, color='red')    plt.hlines(80, 178, 203, linewidth=2, color='red')    # Central arm mask    central_arm_mask = (data['x'].between(33.6, 183)) &\                       (data['y'].between(57, 90)) |\                       (data['y'].between(70, 80)) &\                       (data['x'].between(183, 205))    plt.scatter(data[central_arm_mask]['x'],                data[central_arm_mask]['y'],                s=0.5,                c='royalblue')    # ----------------- CP TO 2ND CURVE 1 ---------------- #    # Arm mask    arm1_mask = ((data['y'].between(23, 70)) & (data['x'].between(180, 203)))|\                ((data['y'].between(3, 23)) & (data['x'].between(180, 203)))    plt.scatter(data[arm1_mask]['x'],                data[arm1_mask]['y'],                s=0.5,                c='lightpink')    # ROI    plt.hlines(8, 180, 190, linewidth=1.5, linestyle=':', color='mediumvioletred')    plt.hlines(18, 180, 190, linewidth=1.5, linestyle=':', color='mediumvioletred')    plt.vlines(180, 8, 18, linewidth=1.5, linestyle=':', color='mediumvioletred')    plt.vlines(190, 8, 18, linewidth=1.5, linestyle=':', color='mediumvioletred')    plt.vlines(180, 3, 23, linewidth=2, color='red')    # ----------------- CP TO 2ND CURVE 2 --------------------- #    # Arm mask    arm2_mask = (data['y'].between(80, 125)) & (data['x'].between(179, 206))| \                (data['y'].between(125, 145)) & (data['x'].between(179, 195))    plt.scatter(data[arm2_mask]['x'],                data[arm2_mask]['y'],                s=0.5,                c='lightpink')    # ROI and Barriers    plt.hlines(131, 180, 190, linewidth=1.5, linestyle=':', color='mediumvioletred')    plt.hlines(141, 180, 190, linewidth=1.5, linestyle=':', color='mediumvioletred')    plt.vlines(179, 130, 140, linewidth=1.5, linestyle=':', color='mediumvioletred')    plt.vlines(189, 130, 140, linewidth=1.5, linestyle=':', color='mediumvioletred')    plt.vlines(179, 125, 145, linewidth=2, color='red')    # ------------ CURVE TO RW 1 ------------- #    curve_to_rw1 = (data['y'].between(3, 23)) & (data['x'].between(150, 180))    plt.scatter(data[curve_to_rw1]['x'],                data[curve_to_rw1]['y'],                s=0.5,                c='mediumaquamarine')    # -------------- CURVE TO RW 2 --------------- #    curve_to_rw_2 = (data['y'].between(125, 145)) & (data['x'].between(145, 179))    plt.scatter(data[curve_to_rw_2]['x'],                data[curve_to_rw_2]['y'],                s=0.5,                c='mediumaquamarine')    # -------------- ROI CENTERS ------------------ #    plt.scatter(        [184, 185, 188, 33.6],        [135, 13, 75, 75],        s=5,        color='springgreen')    plt.legend(loc='upper left')    plt.xlim((33.6, 210))    plt.ylim((-5, 155))    plt.xlabel('x', fontsize=16)    plt.ylabel('y', fontsize=16)    plt.show()""" ----------------PLOT LINARIZED VELOCITIES --------------- """def plot_linearized_velocity(files_path, condition1, condition2, run_type):    # Collect position data and distances    latencies, position, distances = calculate_latency_to_cp(files_path)    # Filter by condition1 and 2    c1 = position['stim_condition'] == condition1    c2 = position['stim_condition'] == condition2    c3 = position['run_type'] == run_type    position = position[(c1 | c2) & c3]    plt.figure(figsize=(25, 28), dpi=300)    colors = {0: 'darkslateblue', 3: 'deeppink', 4: 'mediumseagreen'}    sns.set_style('white')    sns.set_context('talk')    g = sns.relplot(kind="line",                    x="linear_bin_center", y="v",                    hue="stim_condition",                    col="outcome",                    data=position,                    ci='sd',                    palette=[colors[condition1], colors[condition2]])    g.set(xlim=(30, 300), ylim=(0, 120))    leg = g._legend    leg.set_bbox_to_anchor([1.2, 0.9])    for ax in g.axes.ravel():        ax.vlines([distances['cp'].mean(),                   distances['curves'].mean()],                  0, 100, colors='black', linestyle='dotted')        ax.tick_params(axis='both')        ax.set_xlabel('spatial bins (cm)')        ax.set_ylabel('av. velocity (cm/s) +/- SD')        ax.text(                x=distances['cp'].mean() - 10,                y=110,                s='CP',                size=16        )        ax.text(            x=distances['curves'].mean() - 17,            y=110,            s='CURVE',            size=16        )    plt.show()